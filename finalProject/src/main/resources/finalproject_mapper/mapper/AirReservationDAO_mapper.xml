<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="kos.triple.project.persistence.joon.AirReservationDAO">
	
	<!-- 항공 결산 커스텀 -->
	
	<select id="getChatDataCustom_Air1" resultType="kos.triple.project.vo.MapVO" parameterType="java.util.Map">
		SELECT NVL(day,'전체') as key , COUNT(day) as value
		FROM
		(
		SELECT decode(to_char(to_date(TO_CHAR(restime,'yyyymmdd'), 'yyyymmdd'), 'D')
		             , 1, '일', 2, '월', 3, '화', 4, '수', 5, '목', 6, '금', 7, '토'
		             , to_char(to_date(TO_CHAR(restime,'yyyymmdd'), 'yyyymmdd'), 'D') ) as day
		FROM res_air)
		GROUP BY ROLLUP(day)
	</select>
	
	<select id="getChatDataCustom_Air2" resultType="kos.triple.project.vo.MapVO" parameterType="java.util.Map">
		SELECT NVL(paymethod,'전체') as key , SUM(price) as value
		FROM res_air
		GROUP BY ROLLUP(paymethod)
	</select>
	
	<select id="getChatDataCustom_Air3" resultType="kos.triple.project.vo.MapVO" parameterType="java.util.Map">
		SELECT TO_CHAR(restime,'MM') as key,SUM(price) as value
		FROM res_air
		WHERE TO_CHAR(restime,'YYYYMM') BETWEEN #{year}||'01' AND #{year}||'12'
		GROUP BY TO_CHAR(restime,'MM') 
		ORDER BY TO_CHAR(restime,'MM')
	</select>
	
	<!-- 항공 결산 커스텀 -->
	
	<select id="getChatData_Air_chart1" resultType="int">
		SELECT COUNT(*) 
		FROM res_air
	</select>
	
	<select id="getChatData_Air_chart2" resultType="int">
		SELECT NVL(SUM(price),0)
		FROM res_air
	</select>
	
	<select id="getChatData_Air_chart3" resultType="kos.triple.project.vo.AirSaleVO" parameterType="String">
		SELECT TO_CHAR(restime,'MM') as key,count(*) as value 
		FROM res_air
		WHERE TO_CHAR(restime,'YYYYMM') BETWEEN #{year}||'01' AND #{year}||'12'
		GROUP BY TO_CHAR(restime,'MM') 
		ORDER BY TO_CHAR(restime,'MM')
	</select>
	
	<update id="setDefaultPriceUpdate_proc" parameterType="java.util.Map">
		UPDATE SEATPRICE
		SET premium_a = #{premium_A} , premium_b = #{premium_B} , premium_c = #{premium_C} , 
		    highClass_a = #{highClass_A} , highClass_b = #{highClass_B} , highClass_c = #{highClass_C} ,
		    nomal_a = #{nomal_A} , nomal_b = #{nomal_B} , nomal_c = #{nomal_C}
		WHERE SEATPRICECODE ='SEATPRICECODE_1'
	</update>
	
	<select id="airResCancelProc_proc_step1" parameterType="String" resultType="kos.triple.project.vo.AirReservationDetailVO">
		SELECT *
		FROM RES_AIR
		WHERE AIRRESNO = #{airResNo}
	</select>
	
	<delete id="airResCancelProc_proc_step2">
		DELETE FROM res_air
		WHERE AIRRESNO = #{airResNo}
	</delete>
	
	<update id="airResCancelProc_proc_step3" parameterType="java.util.Map">
		UPDATE airplane
		SET premium = premium+#{premium}, highClass = highClass+#{highClass}, nomal = nomal+#{nomal} 
		WHERE airPlaneNo=#{airPlaneNo}
	</update>
	
	<select id="getAirReserVationList_proc" parameterType="java.util.Map" resultType="kos.triple.project.vo.AirReservationDetailVO">
			SELECT * 
			FROM(
			    SELECT ROWNUM seq,  airResNo , resTime , mem_id , payMethod , price 
			            , airPlaneNo , adult , baby , student , memSize 
			            , seatLevel_adult , seatLevel_student , seatLevel_baby 
			            , startLocation , endLocation
			    FROM(
			        SELECT airResNo , resTime , mem_id , payMethod , price 
			            , airPlaneNo , adult , baby , student , memSize 
			            , seatLevel_adult , seatLevel_student , seatLevel_baby 
			            , startLocation , endLocation
			        FROM RES_AIR
			        ORDER BY RESTIME DESC
			    )
			)
			WHERE seq BETWEEN #{start} AND #{end}
	</select>

	<select id="getMyPageReserAirPlane_proc" parameterType="java.util.Map" resultType="kos.triple.project.vo.AirReservationDetailVO">
		<![CDATA[
			SELECT * 
			FROM(
			    SELECT ROWNUM seq,  airResNo , resTime , mem_id , payMethod , price 
			            , airPlaneNo , adult , baby , student , memSize 
			            , seatLevel_adult , seatLevel_student , seatLevel_baby 
			            , startLocation , endLocation , startTime , endTime
			    FROM(
			        SELECT airResNo , resTime , mem_id , payMethod , price 
			            , airPlaneNo , adult , baby , student , memSize 
			            , seatLevel_adult , seatLevel_student , seatLevel_baby 
			            , startLocation , endLocation , startTime , endTime
			        FROM RES_AIR
			        WHERE MEM_ID = #{mem_id}
			        ORDER BY RESTIME DESC
			    )
			)
			WHERE seq BETWEEN #{start} AND #{end}
		]]>
	</select>

	<select id="getRouteInfo_proc" resultType="kos.triple.project.vo.RouteVO">
		SELECT *
		FROM route
		WHERE routeNo=#{routeNo}
	</select>
	
	<select id="getRouteNo_proc" resultType="String">
		SELECT routeNo
		FROM airplane
		WHERE airplaneNo = #{airPlaneNo}
	</select>
	
	<select id="getRemainSeat_proc" parameterType="String" resultType="kos.triple.project.vo.AirPlaneVO">
		SELECT premium , highClass , nomal
		FROM airplane
		WHERE airplaneNo = #{airPlaneNo}
	</select>

	<update id="modifyAirPlane_remainSeat_proc" parameterType="java.util.Map">
		<![CDATA[
			UPDATE airplane
			SET	nomal = ( nomal - #{nomal} ) 
				, highClass = ( highClass - #{highClass} ) 
				, premium=( premium - #{premium} )
			WHERE airplaneNo = #{airPlaneNo}
		]]>
	</update>

	<insert id="airResProc_proc" parameterType="kos.triple.project.vo.AirReservationDetailVO">
		INSERT INTO RES_AIR
		VALUES(
			RES_AIR_SEQ.NEXTVAL,#{mem_id},#{memSize},#{payMethod},
			#{price},#{airPlaneNo},SYSTIMESTAMP,#{adult},#{baby},#{student},
			#{seatLevel_adult},#{seatLevel_baby},#{seatLevel_student},
			#{startLocation},#{endLocation},#{startTime},#{endTime}
		)
	</insert>
	
	<select id="getReserVationInfo_proc" parameterType="String" resultMap="airPlaneSearch">
		SELECT * 
		FROM AIRPLANE
		NATURAL JOIN ROUTE
		NATURAL JOIN SEATPRICE
		WHERE airPlaneNo = #{airPlaneNo}
	</select>

	<select id="getAirPortInfo_proc" resultType="kos.triple.project.vo.AirPortVO">
		SELECT airportNo,airportName,airportTel,xPos,yPos
		FROM airport
	</select>
	
	<select id="getAirPlane_proc" resultType="kos.triple.project.vo.AirPlaneVO">
		<![CDATA[
			SELECT airplaneNo , airplanename 
				 , premium , highclass , nomal 
				 , case when airPlaneSize = 'small' then 28 else 50 end as seatPriceCode 
				 , routeNo
				 , airPlaneSize
	    	FROM airplane
	    	ORDER BY airplaneNo
    	]]>
	</select>
	
	<insert id="addAirPlane_proc" parameterType="kos.triple.project.vo.AirPlaneVO">
		<![CDATA[
			INSERT INTO airplane(
				airPlaneNo,airPlaneName,
				premium,highClass,nomal,airPlaneSize
			) 
			VALUES(
				#{airPlaneNo}||TO_CHAR(airplane_seq.nextval),#{airPlaneName},
				#{premium},#{highClass},#{nomal},#{airPlaneSize}
			)
			
			
			
	    ]]>
	</insert>
	
	<select id="getLastAirPlaneNo_proc" resultType="int">
		<![CDATA[
			SELECT AIRPLANE_SEQ.CURRVAL
			FROM DUAL
		]]>
	</select>
	
	<delete id="deleteAirPlane_proc" parameterType="String">
		<![CDATA[
			DELETE FROM airplane
			WHERE airPlaneNo=#{airplaneNo}
			AND ( systimestamp > (SELECT starttime
				                FROM airplane a 
				                JOIN route r 
				                ON a.routeno=r.routeno
				                WHERE a.airplaneno=#{airplaneNo}) ) OR ( routeNo is null )
		]]>
	</delete>
	
	<select id="getAirPlaneOne_proc" parameterType="String" resultType="kos.triple.project.vo.AirPlaneVO">
		SELECT * 
		FROM airplane 
		WHERE airPlaneNo=#{airPlaneNo}
	</select>
	
	<select id="getAirPlaneAll_proc" resultType="kos.triple.project.vo.AirPlaneVO">
		SELECT * 
		FROM airplane 
	</select>
	
	<update id="modifyAirPlane_proc" parameterType="kos.triple.project.vo.AirPlaneVO">
		UPDATE airplane
		SET airPlaneName = #{airPlaneName}
		   ,premium = #{premium}
		   ,highClass = #{highClass}
		   ,nomal = #{nomal}
		   ,airPlaneSize = #{airPlaneSize}
		WHERE airPlaneNo=#{airPlaneNo}
	</update>
	
	<select id="getAirPortInfoOne_proc" parameterType="String" 
			resultType="kos.triple.project.vo.AirPortVO" >
		SELECT *
		FROM airport
		WHERE airportName = #{airPortName}
	</select>
	
	<insert id="setRoute_proc_step1" parameterType="java.util.Map">
		<![CDATA[
			INSERT INTO route
			VALUES(
				TO_CHAR('R'||TO_CHAR(ROUTE_SEQ.NEXTVAL)),
				#{startAirPortNo},#{midAirPortNo},#{endAirPortNo},
				#{startTime},
				#{midTime},
				#{arrivalTime},
				#{stepOneDistence},
				#{stepTwoDistence},
				#{resultDistance}
			)
		]]>
	</insert>
	
	<select id="getLastRouteNo" resultType="String">
		<![CDATA[
			SELECT TO_CHAR(ROUTE_SEQ.CURRVAL)
			FROM DUAL
		]]>
	</select>
	
	 <update id="setRoute_proc_step2" parameterType="java.util.Map">
	 	UPDATE airplane
	 	SET routeNo=#{routeNo}
	 	WHERE airPlaneNo=#{airPlaneNo}
	 </update>
	 
	 <select id="setRouteCancel_proc_step1" resultType="String" parameterType="String">
	 	SELECT routeNo FROM airplane WHERE airPlaneNo=#{airPlaneNo}
	 </select>
	 
	 <update id="setRouteCancel_proc_step2" parameterType="String">
	 	UPDATE airplane
	 	SET routeNo = null
	 	WHERE airPlaneNo=#{airPlaneNo}
	 </update>
	 
	 <delete id="setRouteCancel_proc_step3" parameterType="String">
	 	DELETE FROM route WHERE routeNo=#{routeNo}
	 </delete>
	
	<select id="getSeatDefaultPrice_proc" resultType="kos.triple.project.vo.SeatPriceVO">
		SELECT * FROM seatPrice WHERE seatPriceCode='SEATPRICECODE_1'
	</select>
	
	<update id="setSeatPrice_proc_step1" parameterType="kos.triple.project.vo.SeatPriceVO">
		UPDATE seatPrice
		SET premium_A=#{premium_A},premium_B=#{premium_B},premium_C=#{premium_C},
			highClass_A=#{highClass_A},highClass_B=#{highClass_B},highClass_C=#{highClass_C},
			nomal_A=#{nomal_A},nomal_B=#{nomal_B},nomal_C=#{nomal_C}
		WHERE seatPriceCode='SEATPRICECODE_1'
	</update>
	
	<update id="setSeatPrice_proc_step2" parameterType="String">
		UPDATE airplane
		SET seatPriceCode='SEATPRICECODE_1'
		WHERE airplaneNo=#{airPlaneNo}
	</update>
	
	<insert id="setCustomSeatPrice_proc_step1" parameterType="kos.triple.project.vo.SeatPriceVO">
		INSERT INTO seatPrice 
		VALUES( #{seatPriceCode}||TO_CHAR(SEATPRICE_SEQ.NEXTVAL),
			#{premium_A},#{premium_B},#{premium_C},
			#{highClass_A},#{highClass_B},#{highClass_C},
			#{nomal_A},#{nomal_B},#{nomal_C}
		)
	</insert>
	
	<select id="setCustomSeatPrice_proc_step2" resultType="int">
		SELECT SEATPRICE_SEQ.CURRVAL FROM DUAL
	</select>
	
	<update id="setCustomSeatPrice_proc_step3" parameterType="java.util.Map">
		UPDATE airplane
		SET seatPriceCode = #{seatPriceCode}
		WHERE airplaneNo = #{airPlaneNo}
	</update>
	
	<select id="getSeatPriceInfo_proc" 
		parameterType="String"
		resultType="kos.triple.project.vo.SeatPriceVO">
		SELECT s.SEATPRICECODE , 
		      premium_A , premium_B , premium_C ,
		      highClass_A , highClass_B , highClass_C ,
		      nomal_A , nomal_B , nomal_C
		FROM AIRPLANE a
		JOIN SEATPRICE s
		ON a.seatpriceCode = s.seatpriceCode
		WHERE airplaneNo=#{airPlaneNo}
	</select>
	
	<update id="modifySeatPrice_proc" parameterType="kos.triple.project.vo.SeatPriceVO">
		UPDATE seatprice
		SET premium_A=#{premium_A} , premium_B=#{premium_B} , premium_C=#{premium_C} ,
			highClass_A=#{highClass_A} , highClass_B=#{highClass_B} , highClass_C=#{highClass_C} ,
			nomal_A=#{nomal_A} , nomal_B=#{nomal_B} , nomal_C=#{nomal_C}
		WHERE seatPriceCode=#{seatPriceCode}
	</update>
	
	
	
	<resultMap type="kos.triple.project.vo.AirReservationSearchVO" id="airPlaneSearch">
		<collection property="a" ofType="kos.triple.project.vo.AirPlaneVO">
			<id property="airPlaneNo" column="airPlaneNo" />
			<result property="airPlaneName" column="airPlaneName" />
			<result property="airPortNo" column="airPortNo" />
			<result property="seatPriceCode" column="seatPriceCode" />
			<result property="premium" column="premium" />
			<result property="highClass" column="highClass" />
			<result property="nomal" column="nomal" />
		</collection>
		<collection property="r" ofType="kos.triple.project.vo.RouteVO">
				<id property="routeNo" column=""/>
				<result property="route1" column="route1"/>
				<result property="route2" column="route2"/>
				<result property="route3" column="route3"/>
				<result property="startTime" column="startTime"/>
				<result property="midTime" column="midTime"/>
				<result property="arrivalTime" column="arrivalTime"/>
				<result property="distance1" column="distance1"/>
				<result property="distance2" column="distance2"/>
				<result property="resultDistance" column="resultDistance"/>
		</collection>
		<collection property="s" ofType="kos.triple.project.vo.SeatPriceVO">
			<id property="seatPriceCode" column="seatPriceCode" />
			<result property="premium_A" column="premium_A" />
			<result property="premium_B" column="premium_B" />
			<result property="premium_C" column="premium_C" />
			<result property="highClass_A" column="highClass_A" />
			<result property="highClass_B" column="highClass_B" />
			<result property="highClass_C" column="highClass_C" />
			<result property="nomal_A" column="nomal_A" />
			<result property="nomal_B" column="nomal_B" />
			<result property="nomal_C" column="nomal_C" />
		</collection>

	</resultMap>
	
	<select id="airPlaneSearch" parameterType="java.util.Map" resultMap="airPlaneSearch">
			SELECT * 
			FROM route 
			NATURAL JOIN airplane
			NATURAL JOIN seatPrice
		<where>
			 premium+highclass+nomal>0
			<if test="startAirport_Key != null">
				AND	route1=#{startAirport_Key} 
			</if>
			<if test="endAirport_Key != null">
				AND ( route2=#{endAirport_Key} OR route3=#{endAirport_Key} )
			</if>
			<if test="s_fromDate != null">
				AND starttime &gt;= #{s_fromDate}
			</if>
			<if test="s_toDate != null">
				AND arrivaltime &lt; TO_DATE( #{s_toDate} )+1
			</if>
		</where>
		
		ORDER BY startTime
		
	</select>
	
	<select id="getAirPortLocation_proc" parameterType="String" resultType="kos.triple.project.vo.AirPortVO">
		SELECT *
		FROM airPort
		WHERE airPortNo=#{airPortNo}
	</select>
	
	<select id="getListCount" parameterType="java.util.Map" resultType="int">
		<if test="method.equals('getMyPageReserAirPlane')">
			SELECT COUNT(*)
			FROM RES_AIR
			WHERE MEM_ID = #{mem_id}
		</if>
		<if test="method.equals('getAirReserVationList')">
			SELECT COUNT(*)
			FROM RES_AIR
		</if>
	</select>
	
	<delete id="deadPlaneCollection_proc">
		<![CDATA[
			DELETE FROM airplane
			WHERE airplaneNo in (
								SELECT airplaneNo
								FROM AIRPLANE a 
								JOIN ROUTE r 
								ON a.routeNo = r.routeNo
								WHERE arrivalTime < systimestamp)
		]]>
	</delete>
	
</mapper>